// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets   = ["linux-musl", "native", "debian-openssl-1.1.x"]
} 

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Category {
  id          String    @id  @default(uuid())
  name        String
  description String
  create_at   DateTime?      @default(now())
  update_at   DateTime       @updatedAt
  courses     Courses[]


  @@map("categories")
}

enum UserRole {
  USER
  TEACHER
}
model User {
  id            String      @id @default(uuid())
  name          String
  avatar        String?      
  email         String      @unique
  password      String
  phone_number  String      @unique
  balance       Decimal     @default(0)
  role          UserRole?   @default(USER)
  create_at     DateTime?   @default(now())

  User_tokens  Users_Tokens[]

  @@map("users")
}

enum AdminRole {
  SUPER
  NORMAL
}
model Admin { 
  id            String @id @default(uuid())
  name          String
  email         String @unique
  password      String
  phone_number  String
  role          AdminRole @default(NORMAL)
  created_at    DateTime? @default(now())

  @@map("admin")
}

model Courses {
  id          String    @id @default(uuid())
  name        String    @unique
  price       Decimal
  description String
  cover       String
  duration    Int 
  created_at  DateTime? @default(now())
  update_at   DateTime? @updatedAt
  category    Category  @relation(fields: [category_id], references: [id])
  category_id String
  chapters    Chapters[]
  status      Boolean   @default(false)

  @@map("courses")
}

model Chapters {
  id          String    @id @default(uuid())
  name        String    
  duration    Int 
  number      Int       @default(1)
  created_at  DateTime? @default(now())
  update_at   DateTime? @updatedAt
  courses     Courses   @relation(fields: [courses_id], references: [id])
  videos      Videos[]   
  courses_id  String
  status      Boolean   @default(false)

  @@map("chapters")
}

model Users_Tokens {
  id              String @id @default(uuid())
  refresh_token   String
  User            User @relation(fields: [user_id], references: [id])
  user_id         String
  expires_date    DateTime
  created_at      DateTime @default(now())

  @@map("users_tokens")
}

model Videos {
  id            String    @id @default(uuid())
  name          String  
  description   String? 
  Chapter       Chapters  @relation(fields: [chapter_id], references: [id])
  chapter_id    String
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  @@map("videos")
}